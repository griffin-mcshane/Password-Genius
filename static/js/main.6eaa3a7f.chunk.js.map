{"version":3,"sources":["context/index.js","components/HeaderBar.js","components/SongHeader.js","components/Footer.js","components/BlankSpace.js","components/LyricsCard.js","App.js","serviceWorker.js","styles/theme.js","context/ContextProvider.js","index.js"],"names":["AppContext","React","createContext","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","edge","aria-label","Typography","variant","IconButton","onClick","window","open","scroot","minWidth","backgroundColor","scartist","color","scalbum","scpos","marginBottom","SongCard","appContext","useContext","cAlbumArt","setOpen","artist","loading","setLoading","music","musician","songLyrics","Card","CardContent","Grid","container","direction","justify","alignItems","item","Box","display","width","height","bgcolor","ml","mr","src","alt","Button","CardActions","minHeight","Footer","justifyContent","p","align","BlankSpace","flex","margin","password","albumArt","overflow","contentGrid","marginTop","App","setId","setGeniusUrl","setSongLyrics","setCAlbumArt","setTitle","setArtist","setPassword","apiKey","optimizeQuery","setMusic","setMusician","useState","handleClose","styles","maxWidth","Dialog","onClose","aria-labelledby","disablePortal","DialogTitle","id","DialogContent","DialogContentText","TextField","required","autoFocus","label","fullWidth","onChange","event","target","value","DialogActions","options","searchSong","then","searchResult","url","getAlbumArt","getLyrics","lyrics","chorus","split","pop","acronym","reduce","response","word","slice","generateLyricsAndPassword","Boolean","location","hostname","match","palette","primary","light","main","dark","contrastText","secondary","background","default","typography","fontFamily","join","ContextProvider","children","geniusUrl","context","Provider","createMuiTheme","themeObject","ReactDOM","render","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6eaa3a7f.chunk.js","sourcesContent":["import React from 'react';\r\nconst AppContext = React.createContext({});\r\nexport default AppContext;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MusicIcon from '@material-ui/icons/MusicNote';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n            <MusicIcon edge=\"start\" className={classes.menuButton} aria-label=\"menu\" />\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Password Genius\r\n          </Typography>\r\n          <IconButton  onClick={() => window.open(\"https://github.com/griffin-mcshane/Password-Genius\")}>\r\n                <GitHubIcon />\r\n            </IconButton>\r\n            <IconButton  onClick={() => window.open(\"https://docs.genius.com/\")}>\r\n                <MusicIcon />\r\n            </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}","import React, {useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppContext from \"../context/index\";\r\nconst useStyles = makeStyles({\r\n//SongCard (sc) Styles\r\n  scroot: {\r\n    minWidth: 275,\r\n    backgroundColor: 'black',\r\n  },\r\n  scartist: {\r\n    color: 'white'\r\n  },\r\n  scalbum: {\r\n    color: 'white'\r\n  },\r\n  scpos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function SongCard() {\r\n  const classes = useStyles();\r\n\r\n  const appContext = useContext(AppContext);\r\n  const {\r\n    cAlbumArt,\r\n    title,\r\n    artist,\r\n    loading,\r\n    setLoading,\r\n    open,\r\n    setOpen,\r\n    music,\r\n    musician,\r\n    songLyrics\r\n  } = appContext;\r\n  \r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.scroot}>\r\n      <CardContent>\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-start\"\r\n            alignItems=\"center\"\r\n        >\r\n            <Grid item>\r\n        <Box\r\n            display=\"flex\" \r\n            width={200} height={200} \r\n            bgcolor=\"white\"\r\n            ml={50}\r\n            mr={4}\r\n        >\r\n          <img src={cAlbumArt} alt=\"\" alt=\"\" width={200} height={200}/>\r\n        </Box>\r\n        </Grid>\r\n        <Grid item>\r\n        <Typography variant=\"h4\" color=\"primary\">\r\n          {music}\r\n        </Typography>\r\n        <Typography variant=\"h6\" className={classes.scartist}>\r\n          {musician}\r\n        </Typography>\r\n        <Button color=\"primary\" onClick={handleClickOpen}>Choose Song</Button>\r\n        </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardActions>\r\n\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}","import React, {useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppContext from \"../context/index\";\r\nconst useStyles = makeStyles({\r\n//SongCard (sc) Styles\r\n  scroot: {\r\n    minWidth: 275,\r\n    backgroundColor: 'black',\r\n    minHeight: 100,\r\n  },\r\n  scartist: {\r\n    color: 'white'\r\n  },\r\n  scalbum: {\r\n    color: 'white'\r\n  },\r\n  scpos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function Footer() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <Box width={1} justifyContent=\"center\" className={classes.scroot} p={2}>\r\n      <Typography variant=\"body2\" align=\"center\" className={classes.scartist}>\r\n          Data from Genius API\r\n        </Typography>\r\n        <Typography variant=\"body1\" align=\"center\" className={classes.scartist}>\r\n          Created by Griffin McShane.\r\n        </Typography>\r\n        <Typography variant=\"body2\" align=\"center\" className={classes.scartist}>\r\n          Special Thanks to ZWillGen.\r\n        </Typography>\r\n      </Box>\r\n  );\r\n}","import React from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nexport default function BlankSpace() {\r\n  \r\n    return (\r\n        <Box width={1} height={75}/>\r\n    );\r\n  }","import React, {useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppContext from \"../context/index\";\r\nimport BlankSpace from './BlankSpace'\r\nconst useStyles = makeStyles({\r\n//SongCard (sc) Styles\r\n  scroot: {\r\n    width: 800,\r\n    minHeight: 100,\r\n    flex: 'wrap',\r\n  },\r\n  scpos: {\r\n    marginBottom: 12,\r\n  },\r\n  title: {\r\n    margin: \"45px 30px 45px 30px\",\r\n  }\r\n});\r\n\r\nexport default function SongCard() {\r\n  const classes = useStyles();\r\n\r\n  const appContext = useContext(AppContext);\r\n  const {\r\n    albumArt,\r\n    title,\r\n    artist,\r\n    loading,\r\n    setLoading,\r\n    open,\r\n    setOpen,\r\n    music,\r\n    musician,\r\n    password,\r\n    songLyrics,\r\n  } = appContext;\r\n\r\n  return (\r\n    <Grid\r\n  container\r\n  direction=\"column\"\r\n  justify=\"flex-start\"\r\n  alignItems=\"center\"\r\n  overflow=\"hidden\"\r\n>\r\n    <Grid item>\r\n    <Card className={classes.scroot}>\r\n    <Typography variant=\"overline\" className={classes.title}>\r\n        Lyrics\r\n      </Typography>\r\n      <CardContent>\r\n      <Typography variant=\"body1\">{songLyrics}</Typography>\r\n      </CardContent>\r\n      <CardActions className={classes.scpos} />\r\n    </Card>\r\n    </Grid>\r\n    <BlankSpace />\r\n    <Grid item>\r\n    <Card className={classes.scroot}>\r\n    <Typography variant=\"overline\" className={classes.title}>\r\n        Password\r\n      </Typography>\r\n      <CardContent>\r\n       <Typography variant=\"body1\">{password}</Typography>\r\n      </CardContent>\r\n      <CardActions className={classes.scpos} />\r\n    </Card>\r\n    </Grid>\r\n    </Grid>\r\n  );\r\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport AppContext from \"./context/index\";\nimport Paper from '@material-ui/core/Paper';\n\nimport {getLyrics, searchSong, getAlbumArt} from 'ggenius-lyrics-api';\n//Components\nimport HeaderBar from \"./components/HeaderBar\";\nimport SongHeader from \"./components/SongHeader\";\nimport Footer from './components/Footer';\nimport LyricsCard from './components/LyricsCard';\nimport BlankSpace from './components/BlankSpace';\n// Styles //\nconst useStyles = makeStyles((theme) => ({\n  contentGrid: {\n    marginTop: 10,\n    marginBottom: 10\n  },\n  \n}));\n\n\n\nexport default function App() {\n\n  const appContext = useContext(AppContext);\n  const {\n    setId,\n    setGeniusUrl,\n    songLyrics,\n    setSongLyrics,\n    setCAlbumArt,\n    title,\n    setTitle,\n    artist,\n    setArtist,\n    password,\n    setPassword,\n    loading,\n    setLoading,\n    apiKey,\n    optimizeQuery,\n    open,\n    setOpen,\n    music,\n    setMusic,\n    musician,\n    setMusician\n  } = appContext;\nconst [results, setResults] = useState({});\n  const classes = useStyles();\n  // Functions //\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  function userSearch() {\n    handleClose();\n    const options = {title, artist, apiKey, optimizeQuery};\n    setLoading(true);\n    \n    searchSong(options).then((searchResult) => {\n          setId(searchResult.id);\n          setGeniusUrl(searchResult.url);\n          setMusic(title);\n          setMusician(artist);\n    });\n    setLoading(false);\n    getAlbumArt(options).then((albumArt) => {\n        setCAlbumArt(albumArt);\n    });\n    generateLyricsAndPassword();\n  };\n\n  function generateLyricsAndPassword() {\n    const options = {title, artist, apiKey, optimizeQuery};\n    setLoading(true);\n\n    getLyrics(options).then((lyrics) => {\n      const chorus = lyrics.split(\"Chorus]\").pop().split(\"[\")[0];\n      const acronym = chorus\n        .split(/\\s/)\n        .reduce((response, word) => (response += word.slice(0, 1)), \"\");\n      setSongLyrics(chorus);\n      setPassword(acronym);\n    });\n\n    setLoading(false);\n  }\n\n  return (\n    <div styles={{maxWidth: '100%'}}>\n      <HeaderBar />\n      <SongHeader />\n      <BlankSpace />\n      <LyricsCard />\n      <BlankSpace />\n      <Footer />\n\n      {/* Popup Search */}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"form-dialog-title\"\n        disablePortal\n      >\n        <DialogTitle id=\"form-dialog-title\">Search</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Only a song title is required, but using the artist name will help\n            give you more accurate results.\n          </DialogContentText>\n          <TextField\n            required\n            autoFocus\n            margin=\"dense\"\n            id=\"songSearch\"\n            label=\"Song\"\n            fullWidth\n            onChange={(event) => setTitle(event.target.value)}\n          />\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"artistSearch\"\n            label=\"Artist\"\n            fullWidth\n            onChange={(event) => setArtist(event.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={userSearch} color=\"primary\">\n            Search\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export default {\r\n    palette: {\r\n        primary: {\r\n            light: '#99A7EE',\t        //Periwinkle\r\n            main: '#FFFF64',\t        //Pale Yellow\r\n            dark: '#292929',\t        //Dark Grey\r\n            contrastText: '#000000'\t    //Black\r\n        },\r\n        secondary: {\r\n            light: '#FF1464',           //Rubine Red\r\n            main: '#38EF51',            //Verified Green\r\n            contrastText: '#FFFFFF'\t    //White\r\n        },\r\n        background: {\r\n            default: \"#F7F7F7\"\r\n          },\r\n    },\r\n    typography: {\r\n        fontFamily: [\r\n            'Arial',\r\n            'sans-serif',\r\n        ].join(','),\r\n    },\r\n};","import React, { useState } from 'react';\r\nimport AppContext from '.';\r\nconst ContextProvider = ({ children }) => {\r\n    const [id, setId] = useState(2165830); // Genius song id\r\n    const [geniusUrl, setGeniusUrl] = useState(\"\"); // Genius webpage URL for the song\r\n    const [songLyrics, setSongLyrics] = useState(\"\"); // Song lyrics\r\n    const [cAlbumArt, setCAlbumArt] = useState(\"https://assets.genius.com/images/sharing_fallback.png?1601582088\"); // URL of the album art image (jpg/png)\r\n    const [title, setTitle] = useState(\"\"); // Song name\r\n    const [artist, setArtist] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\"); //Acronym of song chorus\r\n    const [loading, setLoading] = useState(false); //Handle UI changes \r\n    const [open, setOpen] = useState(false);\r\n    const [music, setMusic] = useState(\"To Get Started...\");\r\n    const [musician, setMusician] = useState(\"Select \\\"Choose Song\\\"\");\r\n    const apiKey = \"oWke17J_jgUXQNl6VRCfC-HaUVKzaINOk1eKq3ms7e6XC6yMSl0ZaqXuR80Cz8Le\";\r\n    const optimizeQuery = true;\r\n  \r\n    const context = { \r\n    id,\r\n    setId,\r\n    geniusUrl,\r\n    setGeniusUrl,\r\n    songLyrics,\r\n    setSongLyrics,\r\n    cAlbumArt,\r\n    setCAlbumArt,\r\n    title,\r\n    setTitle,\r\n    artist,\r\n    setArtist,\r\n    password,\r\n    setPassword,\r\n    loading,\r\n    setLoading,\r\n    apiKey,\r\n    optimizeQuery,\r\n    open,\r\n    setOpen,\r\n    music,\r\n    setMusic,\r\n    musician,\r\n    setMusician\r\n  };\r\n  return (\r\n    <AppContext.Provider value={ context }> \r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\nexport default ContextProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport themeObject from \"./styles/theme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport MuiThemeProvider from \"@material-ui/core/styles/MuiThemeProvider\";\nimport ContextProvider from './context/ContextProvider';\nconst theme = createMuiTheme(themeObject);\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <ContextProvider>\n    <App />\n    </ContextProvider>\n    </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}